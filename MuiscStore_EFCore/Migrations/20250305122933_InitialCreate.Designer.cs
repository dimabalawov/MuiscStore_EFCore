// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuiscStore_EFCore;

#nullable disable

namespace MuiscStore_EFCore.Migrations
{
    [DbContext(typeof(MusicStoreContext))]
    [Migration("20250305122933_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MuiscStore_EFCore.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DailyBestId")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyBestId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeeklyBestId")
                        .HasColumnType("int");

                    b.Property<int?>("YearlyBestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DailyBestId");

                    b.HasIndex("MonthlyBestId");

                    b.HasIndex("WeeklyBestId");

                    b.HasIndex("YearlyBestId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.DailyBest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("DailyBests");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DailyBestId")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyBestId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeeklyBestId")
                        .HasColumnType("int");

                    b.Property<int?>("YearlyBestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DailyBestId");

                    b.HasIndex("MonthlyBestId");

                    b.HasIndex("WeeklyBestId");

                    b.HasIndex("YearlyBestId");

                    b.ToTable("TGenres");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.MonthlyBest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("MonthlyBests");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountOfTracks")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("DailyBestId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyBestId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<decimal>("PrimeCost")
                        .HasColumnType("money");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeeklyBestId")
                        .HasColumnType("int");

                    b.Property<int?>("YearlyBestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DailyBestId");

                    b.HasIndex("GenreId");

                    b.HasIndex("MonthlyBestId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("WeeklyBestId");

                    b.HasIndex("YearlyBestId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.Regular", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Regulars");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.WeeklyBest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("WeeklyBests");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.YearlyBest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("YearlyBests");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.Author", b =>
                {
                    b.HasOne("MuiscStore_EFCore.Models.DailyBest", null)
                        .WithMany("Authors")
                        .HasForeignKey("DailyBestId");

                    b.HasOne("MuiscStore_EFCore.Models.MonthlyBest", null)
                        .WithMany("Authors")
                        .HasForeignKey("MonthlyBestId");

                    b.HasOne("MuiscStore_EFCore.Models.WeeklyBest", null)
                        .WithMany("Authors")
                        .HasForeignKey("WeeklyBestId");

                    b.HasOne("MuiscStore_EFCore.Models.YearlyBest", null)
                        .WithMany("Authors")
                        .HasForeignKey("YearlyBestId");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.Genre", b =>
                {
                    b.HasOne("MuiscStore_EFCore.Models.DailyBest", null)
                        .WithMany("Genres")
                        .HasForeignKey("DailyBestId");

                    b.HasOne("MuiscStore_EFCore.Models.MonthlyBest", null)
                        .WithMany("Genres")
                        .HasForeignKey("MonthlyBestId");

                    b.HasOne("MuiscStore_EFCore.Models.WeeklyBest", null)
                        .WithMany("Genres")
                        .HasForeignKey("WeeklyBestId");

                    b.HasOne("MuiscStore_EFCore.Models.YearlyBest", null)
                        .WithMany("Genres")
                        .HasForeignKey("YearlyBestId");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.Record", b =>
                {
                    b.HasOne("MuiscStore_EFCore.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuiscStore_EFCore.Models.DailyBest", null)
                        .WithMany("Records")
                        .HasForeignKey("DailyBestId");

                    b.HasOne("MuiscStore_EFCore.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuiscStore_EFCore.Models.MonthlyBest", null)
                        .WithMany("Records")
                        .HasForeignKey("MonthlyBestId");

                    b.HasOne("MuiscStore_EFCore.Models.Promotion", null)
                        .WithMany("Records")
                        .HasForeignKey("PromotionId");

                    b.HasOne("MuiscStore_EFCore.Models.WeeklyBest", null)
                        .WithMany("Records")
                        .HasForeignKey("WeeklyBestId");

                    b.HasOne("MuiscStore_EFCore.Models.YearlyBest", null)
                        .WithMany("Records")
                        .HasForeignKey("YearlyBestId");

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.Regular", b =>
                {
                    b.HasOne("MuiscStore_EFCore.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.DailyBest", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Genres");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.MonthlyBest", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Genres");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.Promotion", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.WeeklyBest", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Genres");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("MuiscStore_EFCore.Models.YearlyBest", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Genres");

                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
